{
    "blockly": false,
    "blockly_xml": "<xml></xml>",
    "category": "Uncategorized",
    "coa": {
        "data": {
            "customCode": "\"\"\"\n\n\"\"\"\n\n\nimport phantom.rules as phantom\nimport json\nfrom datetime import datetime, timedelta\n\n\ndef on_start(container):\n    phantom.debug('on_start() called')\n\n    # call 'login_disable' block\n    login_disable(container=container)\n\n    return\n\ndef login_disable(action=None, success=None, container=None, results=None, handle=None, filtered_artifacts=None, filtered_results=None, custom_function=None, **kwargs):\n    phantom.debug(\"login_disable() called\")\n\n    # phantom.debug('Action: {0} {1}'.format(action['name'], ('SUCCEEDED' if success else 'FAILED')))\n\n    container_artifact_data = phantom.collect2(container=container, datapath=[\"artifact:*.cef.destinationUserName\",\"artifact:*.id\"])\n\n    parameters = []\n\n    # build parameters list for 'login_disable' call\n    for container_artifact_item in container_artifact_data:\n        if container_artifact_item[0] is not None:\n            parameters.append({\n                \"user\": container_artifact_item[0],\n                \"use_samaccountname\": True,\n                \"context\": {'artifact_id': container_artifact_item[1]},\n            })\n\n    ################################################################################\n    ## Custom Code Start\n    ################################################################################\n\n    # Write your custom code here...\n\n    ################################################################################\n    ## Custom Code End\n    ################################################################################\n\n    phantom.act(\"disable account\", parameters=parameters, name=\"login_disable\", assets=[\"adldap-defenders\"])\n\n    return\n\n\ndef on_finish(container, summary):\n    phantom.debug(\"on_finish() called\")\n\n    ################################################################################\n    ## Custom Code Start\n    ################################################################################\n\n    # This function is called after all actions are completed.\n    # summary of all the action and/or all details of actions\n    # can be collected here.\n\n    # summary_json = phantom.get_summary()\n    # if 'result' in summary_json:\n        # for action_result in summary_json['result']:\n            # if 'action_run_id' in action_result:\n                # action_results = phantom.get_action_results(action_run_id=action_result['action_run_id'], result_data=False, flatten=False)\n                # phantom.debug(action_results)\n    sums = phantom.get_summary()\n    print(sums)\n    ################################################################################\n    ## Custom Code End\n    ################################################################################\n\n    return\n",
            "description": "",
            "edges": [
                {
                    "id": "port_0_to_port_2",
                    "sourceNode": "0",
                    "sourcePort": "0_out",
                    "targetNode": "2",
                    "targetPort": "2_in"
                },
                {
                    "id": "port_2_to_port_1",
                    "sourceNode": "2",
                    "sourcePort": "2_out",
                    "targetNode": "1",
                    "targetPort": "1_in"
                }
            ],
            "hash": "2ba58e18151f14f0aee170fe0357259737a0ac60",
            "nodes": {
                "0": {
                    "data": {
                        "advanced": {
                            "join": []
                        },
                        "functionName": "on_start",
                        "id": "0",
                        "type": "start"
                    },
                    "errors": {},
                    "id": "0",
                    "type": "start",
                    "x": 1000,
                    "y": 419.99999999999943
                },
                "1": {
                    "data": {
                        "advanced": {
                            "join": []
                        },
                        "functionId": 1,
                        "functionName": "on_finish",
                        "id": "1",
                        "type": "end"
                    },
                    "errors": {},
                    "id": "1",
                    "type": "end",
                    "userCode": "\n    # This function is called after all actions are completed.\n    # summary of all the action and/or all details of actions\n    # can be collected here.\n\n    # summary_json = phantom.get_summary()\n    # if 'result' in summary_json:\n        # for action_result in summary_json['result']:\n            # if 'action_run_id' in action_result:\n                # action_results = phantom.get_action_results(action_run_id=action_result['action_run_id'], result_data=False, flatten=False)\n                # phantom.debug(action_results)\n\n",
                    "x": 1000,
                    "y": 840
                },
                "2": {
                    "data": {
                        "action": "disable account",
                        "actionType": "generic",
                        "advanced": {
                            "customName": "login disable",
                            "customNameId": 0,
                            "join": []
                        },
                        "connector": "AD LDAP",
                        "connectorConfigs": [
                            "adldap-defenders"
                        ],
                        "connectorId": "a5730e5d-a396-4695-92c2-35ff391aaf45",
                        "connectorVersion": "v1",
                        "functionId": 1,
                        "functionName": "login_disable",
                        "id": "2",
                        "parameters": {
                            "use_samaccountname": true,
                            "user": "artifact:*.cef.destinationUserName"
                        },
                        "requiredParameters": [
                            {
                                "data_type": "string",
                                "default": false,
                                "field": "user"
                            }
                        ],
                        "type": "action"
                    },
                    "errors": {},
                    "id": "2",
                    "type": "action",
                    "x": 980,
                    "y": 640
                }
            },
            "notes": ""
        },
        "input_spec": null,
        "output_spec": [
            {
                "contains": [],
                "datapaths": [],
                "deduplicate": false,
                "description": "",
                "metadata": {},
                "name": ""
            }
        ],
        "playbook_type": "automation",
        "python_version": "3",
        "schema": "5.0.6",
        "version": "5.3.2.88192"
    },
    "create_time": "2023-06-20T08:18:16.559340+00:00",
    "draft_mode": false,
    "labels": [
        "*"
    ],
    "tags": []
}