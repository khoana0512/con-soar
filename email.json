{
    "blockly": false,
    "blockly_xml": "<xml></xml>",
    "category": "Uncategorized",
    "coa": {
        "data": {
            "description": "",
            "edges": [
                {
                    "id": "port_0_to_port_2",
                    "sourceNode": "0",
                    "sourcePort": "0_out",
                    "targetNode": "2",
                    "targetPort": "2_in"
                },
                {
                    "id": "port_2_to_port_4",
                    "sourceNode": "2",
                    "sourcePort": "2_out",
                    "targetNode": "4",
                    "targetPort": "4_in"
                },
                {
                    "conditions": [
                        {
                            "index": 0
                        }
                    ],
                    "id": "port_4_to_port_3",
                    "sourceNode": "4",
                    "sourcePort": "4_out",
                    "targetNode": "3",
                    "targetPort": "3_in"
                },
                {
                    "conditions": [
                        {
                            "index": 1
                        }
                    ],
                    "id": "port_4_to_port_5",
                    "sourceNode": "4",
                    "sourcePort": "4_out",
                    "targetNode": "5",
                    "targetPort": "5_in"
                },
                {
                    "id": "port_3_to_port_1",
                    "sourceNode": "3",
                    "sourcePort": "3_out",
                    "targetNode": "1",
                    "targetPort": "1_in"
                },
                {
                    "id": "port_5_to_port_1",
                    "sourceNode": "5",
                    "sourcePort": "5_out",
                    "targetNode": "1",
                    "targetPort": "1_in"
                }
            ],
            "hash": "11b82a1fec8fe1133f165e3005548fc3aae8f4d5",
            "nodes": {
                "0": {
                    "data": {
                        "advanced": {
                            "join": []
                        },
                        "functionName": "on_start",
                        "id": "0",
                        "type": "start"
                    },
                    "errors": {},
                    "id": "0",
                    "type": "start",
                    "x": 1000,
                    "y": 419.9999999999998
                },
                "1": {
                    "data": {
                        "advanced": {
                            "join": []
                        },
                        "functionId": 1,
                        "functionName": "on_finish",
                        "id": "1",
                        "type": "end"
                    },
                    "errors": {},
                    "id": "1",
                    "type": "end",
                    "userCode": "\n    # This function is called after all actions are completed.\n    # summary of all the action and/or all details of actions\n    # can be collected here.\n\n    # summary_json = phantom.get_summary()\n    # if 'result' in summary_json:\n        # for action_result in summary_json['result']:\n            # if 'action_run_id' in action_result:\n                # action_results = phantom.get_action_results(action_run_id=action_result['action_run_id'], result_data=False, flatten=False)\n                # phantom.debug(action_results)\n\n",
                    "x": 1020,
                    "y": 920
                },
                "2": {
                    "data": {
                        "action": "detonate url",
                        "actionType": "investigate",
                        "advanced": {
                            "customName": "Scan URL",
                            "customNameId": 0,
                            "join": []
                        },
                        "connector": "VirusTotal",
                        "connectorConfigs": [
                            "scan url"
                        ],
                        "connectorId": "11f676a4-f3d4-4db0-8587-f4e942c07c7c",
                        "connectorVersion": "v1",
                        "functionId": 1,
                        "functionName": "scan_url",
                        "id": "2",
                        "parameters": {
                            "url": "artifact:*.cef.requestURL"
                        },
                        "requiredParameters": [
                            {
                                "data_type": "string",
                                "field": "url"
                            }
                        ],
                        "type": "action"
                    },
                    "errors": {},
                    "id": "2",
                    "type": "action",
                    "x": 980,
                    "y": 520
                },
                "3": {
                    "customCode": "def post_data_1(action=None, success=None, container=None, results=None, handle=None, filtered_artifacts=None, filtered_results=None, custom_function=None, **kwargs):\n    phantom.debug(\"post_data_1() called\")\n\n    # phantom.debug('Action: {0} {1}'.format(action['name'], ('SUCCEEDED' if success else 'FAILED')))\n    receiver = phantom.collect2(container=container, datapath=[\"artifact:*.cef.destinationUserName\",\"artifact:*.id\"])\n    sender = phantom.collect2(container=container, datapath=[\"artifact:*.cef.sourceUserName\",\"artifact:*.id\"])\n    url = phantom.collect2(container=container, datapath=[\"artifact:*.cef.requestURL\",\"artifact:*.id\"])\n    body_formatted_string = phantom.format(\n        container=container,\n        template=\"\"\"{\\n  \\\"sender\\\": \\\"%s\\\",\\n  \\\"receiver\\\": \\\"%s\\\",\\n  \\\"url\\\": \\\"%s\\\"\\n}\"\"\"%(sender,receiver,url),\n        parameters=[])\n    headers_formatted_string = phantom.format(\n        container=container,\n        template=\"\"\"{\\n\\\"accept\\\": \\\"application/json\\\"\\n}\"\"\",\n        parameters=[])\n    location_formatted_string = phantom.format(\n        container=container,\n        template=\"\"\"/send-msteam/email-alert/fail-scan\"\"\",\n        parameters=[])\n\n    parameters = []\n\n    if body_formatted_string is not None and location_formatted_string is not None:\n        parameters.append({\n            \"body\": body_formatted_string,\n            \"headers\": headers_formatted_string,\n            \"location\": location_formatted_string,\n            \"verify_certificate\": False,\n        })\n\n    ################################################################################\n    ## Custom Code Start\n    ################################################################################\n\n    # Write your custom code here...\n\n    ################################################################################\n    ## Custom Code End\n    ################################################################################\n\n    phantom.act(\"post data\", parameters=parameters, name=\"post_data_1\", assets=[\"notification-api\"])\n\n    return",
                    "data": {
                        "action": "post data",
                        "actionType": "generic",
                        "advanced": {
                            "join": []
                        },
                        "connector": "HTTP",
                        "connectorConfigs": [
                            "notification-api"
                        ],
                        "connectorId": "290b7499-0374-4930-9cdc-5e9b05d65827",
                        "connectorVersion": "v1",
                        "functionId": 1,
                        "functionName": "post_data_1",
                        "id": "3",
                        "parameters": {
                            "body": {
                                "functionId": 1,
                                "parameters": [],
                                "template": "{\n  \"sender\": \"string\",\n  \"receiver\": \"string\",\n  \"url\": \"string\"\n}"
                            },
                            "headers": {
                                "functionId": 1,
                                "parameters": [],
                                "template": "{\n\"accept\": \"application/json\"\n}"
                            },
                            "location": {
                                "functionId": 1,
                                "parameters": [],
                                "template": "/send-msteam/email-alert/fail-scan"
                            }
                        },
                        "requiredParameters": [
                            {
                                "data_type": "string",
                                "field": "body"
                            },
                            {
                                "data_type": "string",
                                "field": "location"
                            },
                            {
                                "data_type": "boolean",
                                "field": "verify_certificate"
                            }
                        ],
                        "type": "action"
                    },
                    "errors": {},
                    "id": "3",
                    "type": "action",
                    "x": 1200,
                    "y": 780
                },
                "4": {
                    "data": {
                        "advanced": {
                            "join": []
                        },
                        "conditions": [
                            {
                                "comparisons": [
                                    {
                                        "conditionIndex": 0,
                                        "op": "==",
                                        "param": "scan_url:action_result.status",
                                        "value": "success"
                                    }
                                ],
                                "conditionIndex": 0,
                                "display": "If",
                                "logic": "and",
                                "type": "if"
                            },
                            {
                                "comparisons": [
                                    {
                                        "op": "==",
                                        "param": "",
                                        "value": ""
                                    }
                                ],
                                "conditionIndex": 1,
                                "display": "Else",
                                "logic": "and",
                                "type": "else"
                            }
                        ],
                        "functionId": 1,
                        "functionName": "decision_1",
                        "id": "4",
                        "type": "decision"
                    },
                    "errors": {},
                    "id": "4",
                    "type": "decision",
                    "x": 1060,
                    "y": 620
                },
                "5": {
                    "data": {
                        "action": "get report",
                        "actionType": "investigate",
                        "advanced": {
                            "join": []
                        },
                        "connector": "VirusTotal",
                        "connectorConfigs": [
                            "scan url"
                        ],
                        "connectorId": "11f676a4-f3d4-4db0-8587-f4e942c07c7c",
                        "connectorVersion": "v1",
                        "functionId": 1,
                        "functionName": "get_report_1",
                        "id": "5",
                        "parameters": {
                            "report_type": "url",
                            "scan_id": "scan_url:action_result.data.*.scan_id"
                        },
                        "requiredParameters": [
                            {
                                "data_type": "string",
                                "field": "scan_id"
                            },
                            {
                                "data_type": "string",
                                "default": "file",
                                "field": "report_type"
                            }
                        ],
                        "type": "action"
                    },
                    "errors": {},
                    "id": "5",
                    "type": "action",
                    "x": 820,
                    "y": 780
                }
            },
            "notes": ""
        },
        "input_spec": null,
        "output_spec": null,
        "playbook_type": "automation",
        "python_version": "3",
        "schema": "5.0.6",
        "version": "5.3.2.88192"
    },
    "create_time": "2023-06-23T06:17:20.892974+00:00",
    "draft_mode": false,
    "labels": [
        "*"
    ],
    "tags": []
}